[
    {
        "title": "alibaba_spring-ai-alibaba",
        "content": "> The community driven Spring AI Alibaba OpenManus implementtation can be found at [community/openmanus](./community/openmanus) module.\n\n# [Spring AI Alibaba](https://java2ai.com)\n\n[中文版本](./README-zh.md) | [日本語](./README-ja.md)\n\nAn AI application framework for Java developers built on top of Spring AI that provides seamless integration with Alibaba Cloud QWen LLM services and cloud-native infrastructures.\n\n## Get Started\n\nPlease refer to [quick start](https://java2ai.com/docs/dev/get-started/) for how to quickly add generative AI to your Spring Boot applications.\n\nOverall, it takes only two steps to turn your Spring Boot application into an intelligent agent:\n\n> Because Spring AI Alibaba is developed based on Spring Boot 3.x, it requires JDK version 17 and above.\n\n1. Add `spring-ai-alibaba-starter` dependency to your project.\n\n ```xml\n <dependency>\n  <groupId>com.alibaba.cloud.ai</groupId>\n  <artifactId>spring-ai-alibaba-starter</artifactId>\n  <version>1.0.0-M6.1</version>\n </dependency>\n ```\n\n > NOTICE: Since spring-ai related packages haven't been published to the central repo yet, it's needed to add the following maven repository to your project in order to successfully resolve artifacts like  spring-ai-core.\n >\n > ```xml\n > <repositories>\n >  <repository>\n >   <id>spring-milestones</id>\n >   <name>Spring Milestones</name>\n >   <url>https://repo.spring.io/milestone</url>\n >   <snapshots>\n >    <enabled>false</enabled>\n >   </snapshots>\n >  </repository>\n > </repositories>\n > ```\n>\n> Addendum: If the mirrorOf tag in your local Maven settings. xml is configured with the wildcard *, please modify it according to the following example.\n>\n> ```xml\n> <mirror>\n>   <id>xxxx</id>\n>   <mirrorOf>*,!spring-milestones</mirrorOf>\n>   <name>xxxx</name>\n>   <url>xxxx</url>\n> </mirror>\n> ```\n\n2. Inject `ChatClient`\n\n ```java\n @RestController\n public class ChatController {\n\n  private final ChatClient chatClient;\n\n  public ChatController(ChatClient.Builder builder) {\n   this.chatClient = builder.build();\n  }\n\n  @GetMapping(\"/chat\")\n  public String chat(String input) {\n   return this.chatClient.prompt()\n     .user(input)\n     .call()\n     .content();\n  }\n }\n ```\n\n## Examples\n\n[Spring AI Alibaba and Spring AI usage examples](https://github.com/springaialibaba/spring-ai-alibaba-examples)\n\n## Core Features\n\nSpring AI Alibaba provides the following features, read the [documentation](https://java2ai.com/) on our website for more details of how to use these features.\n\n* Support for Alibaba Cloud QWen Model and Dashscope Model service.\n* Support high-level AI agent abstraction -- ChatClient.\n* Support various Model types like Chat, Text to Image, Audio Transcription, Text to Speech.\n* Both synchronous and stream API options are supported.\n* Mapping of AI Model output to POJOs.\n* Portable API across Vector Store providers.\n* Function calling.\n* Spring Boot Auto Configuration and Starters.\n* RAG (Retrieval-Augmented Generation) support: DocumentReader, Splitter, Embedding, VectorStore, and Retriever.\n* Support conversation with ChatMemory\n\n## Roadmap\n\nSpring AI Alibaba aims to reduce the complexity of building AI native Java applications, from development, evaluation to deployment and observability. In order to achieve that, we provide both open-source framework and ecosystem integrations around it, below are the features that we plan to support in the near future:\n\n* Prompt Template Management\n* Event Driven AI Application\n* Support of more Vector Databases\n* Function Deployment\n* Observability\n* AI proxy support: prompt filtering, rate limit, multiple Model, etc.\n* Development Tools\n\n![ai-native-architecture](./docs/imgs/spring-ai-alibaba-arch.png)\n\n## Contribution Guide\n\nPlease refer to the [Contribution Guide](./CONTRIBUTING.md) to learn how to participate in the development of Spring AI Alibaba.\n\n## References\n\n* [Spring AI](https://docs.spring.io/spring-ai/reference/index.html)\n* [Spring AI Alibaba](https://java2ai.com/docs/dev/overview/)\n* [Alibaba Cloud Dashscope Model Service Platform (阿里云百炼模型服务及应用开发平台)](https://help.aliyun.com/zh/model-studio/getting-started/what-is-model-studio/)\n\n## Contact Us\n\n* Dingtalk Group (钉钉群), search `61290041831` and join.\n* Wechat Group (微信公众号), scan the QR code below and follow us.\n\n<img src=\"./docs/imgs/wechat-account.png\" style=\"width:260px;\"/>\n\n## Credit\n\nSome of this project's ideas and codes are inspired by or rewrote from the following projects. Great thanks to those who have created and open-sourced these projects.\n\n* [Spring AI](https://github.com/spring-projects/spring-ai), a Spring-friendly API and abstractions for developing AI applications licensed under the Apache License 2.0.\n* [Langgraph](https://github.com/langchain-ai/langgraph), a library for building stateful, multi-actor applications with LLMs, used to create agent and multi-agent workflows licensed under the MIT license.\n* [Langgraph4J](https://github.com/bsorrentino/langgraph4j), a porting of original [LangGraph](https://github.com/langchain-ai/langgraph) from the [LangChain AI project](https://github.com/langchain-ai) in Java fashion.\n",
        "tokens": 1250
    }
]